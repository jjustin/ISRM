angle = 10, col = "red")
text(x, y, labels(eurodist), cex = 0.8)
# Exercise 1
# Using simulated annealing solve the 0-1 backpack problem
# Size of the problem
n <- 50
# Item prices
prices <- runif(n, 10, 40)
prices
# Item weights
weights <- runif(n, 5, 10)
weights
help solve.QP
#quadratic programming
#install.packages("quadprog")
library(quadprog)
help solve.QP
?help solve.QP
?solve.QP
?matrix
Dmat <- 2*matrix(c(2, 1,
1, 2), ncol=2, byrow = TRUE)
dvec = c(1,1)
Amat <- t(matrix(c(3, 4,
0, 1,
0, -1,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, -1,
0, 1
), ncol = 2, byrow = TRUE))
bvec <- c(10, 2, -22, 3, 6, 20, 4, 22, 2)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
Dmat <- 2*matrix(c(2, 1,
1, 2), ncol=2, byrow = TRUE)
dvec = c(1,1)
Amat <- t(matrix(c(3, 4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1,
), ncol = 2, byrow = TRUE))
bvec <- c(10, 3, 6, 20, 4, -22, 2)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
res
Amat
bvec
#constraints
#2a + 3b + 4c = 5
#-3a - 4b + 2c >= -10
#-3a + 2b + c >= 2
#a >= 0
#-a >= -5
#b >= 1
#-b >= -5
#c >= 0
#-c >= -5
Amat <- matrix(c(2, 3, 4,
-3, -4, 2,
-3, 2, 1,
1, 0, 0,
-1, 0, 0,
0, 1, 0,
0, -1, 0,
0, 0, 1,
0, 0, -1
), ncol = 3, byrow = TRUE)
Amat <- t(Amat) # transpose
bvec <- c(5, -10, 2, 0, -5, 1, -5, 0, -5)
dvec
Dmat
Amat
bvec
#min a - 2b + 4c + a^2 + 2b^2 + 3c^2 + ac
#optimization variables
Dmat <- 2*matrix(c(1, 0, 0.5, # quad terms
0, 2, 0,
0.5, 0, 3), ncol = 3, byrow = TRUE)
dvec <- -c(1, -2, 4) # linear terms
dvec
Dmat
Amat
bvec
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
res
Dmat <- 2*matrix(c(2, 1,
1, 2), ncol=2, byrow = TRUE)
dvec = c(1,1)
Amat <- t(matrix(c(3, 4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1,
), ncol = 2, byrow = TRUE))
bvec <- c(10, 3, 6, 20, 4, -22, 2)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
Amat <- t(matrix(c(3, 4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1
), ncol = 2, byrow = TRUE))
bvec <- c(10, 3, 6, 20, 4, -22, 2)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
Dmat <- 2*matrix(c(2, 1,
1, 2), ncol=2, byrow = TRUE)
dvec = c(1,1)
Amat <- t(matrix(c(3, 4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1
), ncol = 2, byrow = TRUE))
bvec <- c(10, 3, 6, -20, 4, -22, 2)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
res
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
Amat <- t(matrix(c(3, 4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1
), ncol = 2, byrow = TRUE))
bvec <- c(10, 3, 6, -20, 4, -22, 2)
Amat
bvec
Dmat <- 2*matrix(c(2, 1,
1, 2), ncol=2, byrow = TRUE)
dvec = c(1,1)
Amat <- t(matrix(c(3, 4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1
), ncol = 2, byrow = TRUE))
bvec <- c(10, -3, 6, -20, 4, -22, 2)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
bvec <- c(10, -3, 6, -20, 4, 2, -22)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
bvec <- c(10, -3, 6, -20, 4, 0, -22)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
Amat <- t(matrix(c(3, -4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1
), ncol = 2, byrow = TRUE))
bvec <- c(10, -3, 6, -20, 4, 0, -22)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
Dmat <- 2*matrix(c(2, 1,
1, 2), ncol=2, byrow = TRUE)
dvec = c(1,1)
Amat <- t(matrix(c(3, -4,
-1, 1,
1, 2,
-1, 0,
1, 0,
0, 1,
0, -1
), ncol = 2, byrow = TRUE))
bvec <- c(0, -3, 6, -20, 4, 2, -22)
res <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # meq -> number of equalities in Amat
res
x <- c(-10,20,-30,40,-50,60,-70,80)
x
# logical vector indexing
x[x>0]
# logical vector
x > 0
y <- c(1,1,1,1,0,0,0,0)
x[y]
x[y==0]
# Exercise 1
# Using simulated annealing solve the 0-1 backpack problem
# Size of the problem
n <- 50
# Item prices
prices <- runif(n, 10, 40)
# Item weights
weights <- runif(n, 5, 10)
# Maximum weight
maxWeight <- sum(weights)*0.6
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
sq
sum(prices[sq==1])
a<-c(1,2,3,4,5,6)
sample(a, 12, replace=TRUE)
a<-c(1,2,3,4,5,6)
sample(a, 3, replace=TRUE)
# the which() function returns indices corresponding to constants TRUE
which(x > 0)
# logical vector
x > 0
x <- c("a", "b", "c", "d")
# replacing an element
x[2] <- "BBBBB"
x
# Exercise 1
# Using simulated annealing solve the 0-1 backpack problem
# Size of the problem
n <- 50
# Item prices
prices <- runif(n, 10, 40)
# Item weights
weights <- runif(n, 5, 10)
# Maximum weight
maxWeight <- sum(weights)*0.6
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
# Complete the function to compute the value of a backpack
objectiveFunction <- function(sq){
w <- sum(weights[sq==1])
if(w > maxWeight){
return(-w)
}
return(sum(prices[sq==1]))
}
# Exercise 1 b)
# Generate all the neighbours
sosed <<- 1
genNeig <- function(sq) {
sq[sosed] <- (sq[sosed]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
?optim
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
# Exercise 1 b)
# Generate all the neighbours
sosed <<- 1
genNeig <- function(sq) {
sq[sosed] <- (sq[sosed]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
sosed <<- 1
genNeig <- function(sq) {
replaceSize <- 3
rr<-c(rep(0, n-replaceSize), rep(1, replaceSize))
sq[rr] <- (sq[rr]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
# Exercise 1 b)
# Generate all the neighbours
sosed <<- 1
genNeig <- function(sq) {
sq[sosed] <- (sq[sosed]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
sosed <<- 1
genNeig <- function(sq) {
replaceSize <- 3
rr<-c(rep(0, n-replaceSize), rep(1, replaceSize))
sq[rr] <- (sq[rr]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
# Exercise 1
# Using simulated annealing solve the 0-1 backpack problem
# Size of the problem
n <- 50
# Item prices
prices <- runif(n, 10, 40)
# Item weights
weights <- runif(n, 5, 10)
# Maximum weight
maxWeight <- sum(weights)*0.6
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
# Complete the function to compute the value of a backpack
objectiveFunction <- function(sq){
w <- sum(weights[sq==1])
if(w > maxWeight){
return(-w)
}
return(sum(prices[sq==1]))
}
# Exercise 1 b)
# Generate all the neighbours
sosed <<- 1
genNeig <- function(sq) {
sq[sosed] <- (sq[sosed]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
sosed <<- 1
genNeig <- function(sq) {
replaceSize <- 3
rr<-c(rep(0, n-replaceSize), rep(1, replaceSize))
sq[rr] <- (sq[rr]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
sosed <<- 1
genNeig <- function(sq) {
replaceSize <- 3
rr<-c(rep(0, n-replaceSize), rep(1, replaceSize))
sq[rr] <- (sq[rr]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
sq
replaceSize <- 3
rr<-c(rep(0, n-replaceSize), rep(1, replaceSize))
rr
replaceSize <- 3
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
rr
rr
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
rr
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
rr
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
genNeig <- function(sq) {
replaceSize <- 3
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr] <- (sq[rr]+1)%%2
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
# Exercise 1
# Using simulated annealing solve the 0-1 backpack problem
# Size of the problem
n <- 50
# Item prices
prices <- runif(n, 10, 40)
# Item weights
weights <- runif(n, 5, 10)
# Maximum weight
maxWeight <- sum(weights)*0.6
sq <- sample(c(rep(0, n/2), rep(1, n/2)))
# Complete the function to compute the value of a backpack
objectiveFunction <- function(sq){
w <- sum(weights[sq==1])
if(w > maxWeight){
return(-w)
}
return(sum(prices[sq==1]))
}
objectiveFunction(sq)
# Exercise 1 b)
# Generate all the neighbours
sosed <<- 1
genNeig <- function(sq) {
sq[sosed] <- (sq[sosed]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
objectiveFunction(sq)
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
genNeig <- function(sq) {
replaceSize <- 3
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr] <- (sq[rr]+1)%%2
return(sq)
}
objectiveFunction(sq)
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
genNeig <- function(sq) {
replaceSize <- 1
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr] <- (sq[rr]+1)%%2
return(sq)
}
objectiveFunction(sq)
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
replaceSize <- 1
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
rr
sq[rr]+1
replaceSize <- 3
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr]+1
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr]+1
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr]+1
rr
sq
(sq[rr]+rep(1,replaceSize))
sq[rr]
sq[rr==1]+1
(sq[rr==1]+1)%%2
sq[rr] <- (sq[rr==1]+1)%%2
sq
sq[rr==1] <- (sq[rr==1]+1)%%2
sq
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
genNeig <- function(sq) {
replaceSize <- 3
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr==1] <- (sq[rr==1]+1)%%2
return(sq)
}
objectiveFunction(sq)
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
genNeig <- function(sq) {
replaceSize <- 5
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr==1] <- (sq[rr==1]+1)%%2
return(sq)
}
objectiveFunction(sq)
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
# Exercise 1 b)
# Generate all the neighbours
sosed <<- 1
genNeig <- function(sq) {
sq[sosed] <- (sq[sosed]+1)%%2
sosed <<- sosed + 1
if(sosed > n)
sosed <<- 1
return(sq)
}
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
# Exercise c)
# Select a wider neighbourhood (add or remove 2,3,4,..., n elements at once)
genNeig <- function(sq) {
replaceSize <- 1
rr<-sample(c(rep(0, n-replaceSize), rep(1, replaceSize)))
sq[rr==1] <- (sq[rr==1]+1)%%2
return(sq)
}
objectiveFunction(sq)
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res  #dobljena re???itev
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
res <- optim(sq, objectiveFunction, genNeig, method = "SANN", control = list(fnscale=-1, maxit = 30000, temp = 2000, trace = TRUE, tmax = nrow(indmat), REPORT = 5))
