00000            p                 START   0    
00000  4B2176    pp                JSUB    stackinit    
00003  4B2033                      JSUB    prepareTerms    
00006  4B2124                      JSUB    drawCoord    
00009  07223C                      LDX     *0 (WORD -40)    
0000C  4B208F    loop              JSUB    calc    
0000F  272089                      DIV     quotx    
00012  0F215E                      STA     y    
00015  132158                      STX     x    
00018  4B20D3                      JSUB    drawPoint    
0001B  2F222D                      TIX     *1 (WORD 40)    
0001E  3B2FEB                      JLT     loop    
00021  3F2FFD    halt              J       halt    
                  .......................Parameters............................
                  . yscale should divide xscale
00024  000004    yscale            WORD    4    
00027  000008    xscale            WORD    8    
0002A  FFFFFD    polynom           WORD    -3    . x ^4
0002D  FFFFFF                      WORD    -1    . x^3
00030  000002                      WORD    2    . x^2
00033  000003                      WORD    3    . x^1
00036  000000    polycons          WORD    0    . x^0
00039            polyend           EQU     *    
                  
                  ........................Term preperator......................
00039  162173    prepareTerms      STL     @stackptr    
0003C  4B2149                      JSUB    stackpush    
                  
                  . calculate number of terms
0003F  010039                      LDA     #polyend    
00042  1D2FE5                      SUB     #polynom    
00045  1F2206                      SUB     *2 (WORD 1)    
00048  272206                      DIV     *3 (WORD 3)    
                  
0004B  4B2036                      JSUB    pow    . calulate power of polynom
0004E  272FD3                      DIV     yscale    
00051  0F2047                      STA     quotx    . was divided to avoid multipling and then dividing
00054  232FCD                      MUL     yscale    
                  
                  . iterate over all entries and multiply each with 8 time less
00057  6D2FDC                      LDS     #polycons    
0005A  7F208B                      STS     polytmp    
0005D  762088    prepTermsLoop     LDT     @polytmp    
00060  9805                        MULR    A,T    
00062  862083                      STT     @polytmp    
00065  272FBF                      DIV     xscale    
                  
                  . inc counter
00068  752FBF                      LDT     #polynom    
0006B  A045                        COMPR   S,T    
0006D  33200B                      JEQ     endPrepTermsLoop    
00070  7721DE                      LDT     *3 (WORD 3)    
00073  9454                        SUBR    T,S    
00075  7F2070                      STS     polytmp    
                  
00078  3F2FE2                      J       prepTermsLoop    
0007B  4B211C    endPrepTermsLoop  JSUB    stackpop    
0007E  0A212E                      LDL     @stackptr    
00081  4F0000                      RSUB        
                  
                  . loads xscale^A into A
00084  B410      pow               CLEAR   X    
00086  0F200F                      STA     powVar    
00089  0321C2                      LDA     *2 (WORD 1)    
0008C  232F98    powloop           MUL     xscale    
0008F  2F2006                      TIX     powVar    
00092  3B2FF7                      JLT     powloop    
00095  4F0000                      RSUB        
                  
00098  000000    powVar            WORD    0    
0009B  000000    quotx             WORD    0    . quotient by which we divide
                  
                  .........................CALCULATOR.....................
                  
                  . calculates p(x) with x provieded in X. Output is returned in A
0009E  16210E    calc              STL     @stackptr    
000A1  4B20E4                      JSUB    stackpush    
000A4  862108                      STT     @stackptr    
000A7  4B20DE                      JSUB    stackpush    
000AA  7E2102                      STS     @stackptr    
000AD  4B20D8                      JSUB    stackpush    
                  
000B0  6D2F77                      LDS     #polynom    . init
000B3  7F2035                      STS     polyNext    
000B6  022032                      LDA     @polyNext    
                  
000B9  772195    calloop           LDT     *3 (WORD 3)    
000BC  9054                        ADDR    T,S    . increment polyNext
000BE  7F202A                      STS     polyNext    . here polynext points to next polynom term
                  . check if polynext is out of bounds
000C1  750039                      LDT     #polyend    
000C4  A045                        COMPR   S,T    . check if polynext is out of bounds
000C6  33200A                      JEQ     calendloop    . polynext is out of bound -> return result
                  . get next term
000C9  76201F                      LDT     @polyNext    . T contains current term
                  
                  . horner is done here
000CC  9810                        MULR    X,A    
000CE  9050                        ADDR    T,A    
000D0  3F2FE6                      J       calloop    
000D3  4B20C4    calendloop        JSUB    stackpop    
000D6  6E20D6                      LDS     @stackptr    
000D9  4B20BE                      JSUB    stackpop    
000DC  7620D0                      LDT     @stackptr    
000DF  4B20B8                      JSUB    stackpop    
000E2  0A20CA                      LDL     @stackptr    
000E5  4F0000                      RSUB        
                  
000E8  000000    polytmp           WORD    0    
000EB  000000    polyNext          WORD    0    
                  
                  
                  ...........................SCREEN...........................
                  . #Columns = 80
                  . #Rows = 25
                  
                  . drawn point on screen
000EE  0E20BE    drawPoint         STA     @stackptr    
                  . move xy coordss to screen coords
000F1  03207C                      LDA     x    
000F4  1B2154                      ADD     *1 (WORD 40)    
000F7  0F2076                      STA     x    
000FA  032076                      LDA     y    
000FD  232154                      MUL     *4 (WORD -1)    
00100  1B2154                      ADD     *5 (WORD 12)    
00103  0F206D                      STA     y    
                  . calculate point
00106  03206A                      LDA     y    
00109  23214E                      MUL     *6 (WORD 80)    
0010C  1B2061                      ADD     x    
0010F  1B2058                      ADD     screen    
                  . check if we are on screen
00112  2B2055                      COMP    screen    
00115  3B200F                      JLT     drawPointEnd    
00118  2B2052                      COMP    screenend    
0011B  372009                      JGT     drawPointEnd    
                  . drawing
0011E  0F2055                      STA     scrpos    
00121  032139                      LDA     *7 (WORD 42)    
00124  56204F                      STCH    @scrpos    
00127  022085    drawPointEnd      LDA     @stackptr    
0012A  4F0000                      RSUB        
                  
                  . draws coord system
0012D  03203A    drawCoord         LDA     screen    
00130  1B212D                      ADD     *8 (WORD 39)    
00133  B410                        CLEAR   X    
00135  0F203E    drawCoordLoop1    STA     scrpos    
00138  032128                      LDA     *9 (WORD 124)    . |
0013B  562038                      STCH    @scrpos    
0013E  032035                      LDA     scrpos    
00141  1B2116                      ADD     *6 (WORD 80)    
00144  2F211F                      TIX     *10 (WORD 25)    
00147  3B2FEB                      JLT     drawCoordLoop1    
                  . across
0014A  03201D                      LDA     screen    
0014D  1B2119                      ADD     *11 (WORD 961)    
00150  B410                        CLEAR   X    
00152  0F2021    drawCoordLoop2    STA     scrpos    
00155  032114                      LDA     *12 (WORD 45)    
00158  56201B                      STCH    @scrpos    
0015B  032018                      LDA     scrpos    
0015E  1B20ED                      ADD     *2 (WORD 1)    
00161  2F20F6                      TIX     *6 (WORD 80)    
00164  3B2FEB                      JLT     drawCoordLoop2    
                  
00167  4F0000                      RSUB        
                  
0016A  00B7FF    screen            WORD    47103    . B800
0016D  00BFD0    screenend         WORD    49104    
00170  000000    x                 WORD    0    
00173  000000    y                 WORD    0    
00176  000000    scrpos            WORD    0    
                  
                  ........................... STACK ..........................
00179  0F2030    stackinit         STA     stacktmp    
                  
                  . init stackptr value
0017C  012033                      LDA     #stack    
0017F  0F202D                      STA     stackptr    
                  
                  . restore values
00182  032027                      LDA     stacktmp    
00185  4F0000                      RSUB        
                  
00188  0F2021    stackpush         STA     stacktmp    
                  
                  . move pointer up
0018B  032021                      LDA     stackptr    
0018E  1B20C0                      ADD     *3 (WORD 3)    
00191  0F201B                      STA     stackptr    
                  
                  . restore values
00194  032015                      LDA     stacktmp    
00197  4F0000                      RSUB        
                  
0019A  0F200F    stackpop          STA     stacktmp    
                  
                  . move pointer down
0019D  03200F                      LDA     stackptr    
001A0  1F20AE                      SUB     *3 (WORD 3)    
001A3  0F2009                      STA     stackptr    
                  
                  . restore values
001A6  032003                      LDA     stacktmp    
001A9  4F0000                      RSUB        
                  
001AC  000000    stacktmp          WORD    0    
001AF  000000    stackptr          WORD    0    
001B2  00....00  stack             RESW    50    
00248  FFFFD8    *0                WORD    -40    
0024B  000028    *1                WORD    40    
0024E  000001    *2                WORD    1    
00251  000003    *3                WORD    3    
00254  FFFFFF    *4                WORD    -1    
00257  00000C    *5                WORD    12    
0025A  000050    *6                WORD    80    
0025D  00002A    *7                WORD    42    
00260  000027    *8                WORD    39    
00263  00007C    *9                WORD    124    
00266  000019    *10               WORD    25    
00269  0003C1    *11               WORD    961    
0026C  00002D    *12               WORD    45    
